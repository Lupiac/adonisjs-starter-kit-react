// @ts-nocheck
/* eslint-disable */
// --------------------------------------------------
// This file is auto-generated by Tuyau. Do not edit manually !
// --------------------------------------------------

import type { MakeTuyauRequest, MakeTuyauResponse } from '@tuyau/utils/types'
import type { InferInput } from '@vinejs/vine/types'

type LoginGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/sign_in_controller.ts').default['show'], false>
}
type LoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/auth/validators.ts')['signInValidator']>>
  response: MakeTuyauResponse<import('../app/auth/controllers/sign_in_controller.ts').default['handle'], true>
}
type LogoutGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/sign_out_controller.ts').default['handle'], false>
}
type SignUpGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/sign_up_controller.ts').default['show'], false>
}
type SignUpPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/auth/validators.ts')['signUpValidator']>>
  response: MakeTuyauResponse<import('../app/auth/controllers/sign_up_controller.ts').default['handle'], true>
}
type ForgotPasswordGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/forgot_password_controller.ts').default['show'], false>
}
type ForgotPasswordPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/auth/validators.ts')['forgotPasswordValidator']>>
  response: MakeTuyauResponse<import('../app/auth/controllers/forgot_password_controller.ts').default['handle'], true>
}
type ResetpasswordIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/reset_password_controller.ts').default['show'], false>
}
type ResetpasswordIdPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/auth/validators.ts')['resetPasswordValidator']>>
  response: MakeTuyauResponse<import('../app/auth/controllers/reset_password_controller.ts').default['handle'], true>
}
type IdRedirectGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/social_controller.ts').default['redirect'], false>
}
type IdCallbackGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/auth/controllers/social_controller.ts').default['callback'], false>
}
type UsersGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/users/controllers/users_controller.ts').default['index'], false>
}
type UsersPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/users/validators.ts')['createUserValidator']>>
  response: MakeTuyauResponse<import('../app/users/controllers/users_controller.ts').default['store'], true>
}
type UsersIdPutPatch = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/users/validators.ts')['editUserValidator']>>
  response: MakeTuyauResponse<import('../app/users/controllers/users_controller.ts').default['update'], true>
}
type UsersIdDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/users/controllers/users_controller.ts').default['destroy'], false>
}
type UsersInvitePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/users/validators.ts')['inviteUserValidator']>>
  response: MakeTuyauResponse<import('../app/users/controllers/invite_controller.ts').default['handle'], true>
}
type UsersImpersonateIdPost = {
  request: unknown
  response: MakeTuyauResponse<import('../app/users/controllers/impersonates_controller.ts').default['store'], false>
}
type SettingsProfilePut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/users/validators.ts')['updateProfileValidator']>>
  response: MakeTuyauResponse<import('../app/users/controllers/profile_controller.ts').default['handle'], true>
}
type SettingsProfileGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/users/controllers/profile_controller.ts').default['show'], false>
}
type SettingsTokensGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/users/controllers/tokens_controller.ts').default['index'], false>
}
type SettingsTokensIdDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/users/controllers/tokens_controller.ts').default['destroy'], false>
}
type ApiTokensPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/users/validators.ts')['createTokenValidator']>>
  response: MakeTuyauResponse<import('../app/users/controllers/tokens_controller.ts').default['store'], true>
}
type SettingsPasswordPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/users/validators.ts')['updatePasswordValidator']>>
  response: MakeTuyauResponse<import('../app/users/controllers/password_controller.ts').default['handle'], true>
}
type SettingsPasswordGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/users/controllers/password_controller.ts').default['show'], false>
}
type DashboardGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/analytics/controllers/dashboard_controller.ts').default['handle'], false>
}
export interface ApiDefinition {
  'login': {
    '$url': {
    };
    '$get': LoginGetHead;
    '$head': LoginGetHead;
    '$post': LoginPost;
  };
  'logout': {
    '$url': {
    };
    '$get': LogoutGetHead;
    '$head': LogoutGetHead;
  };
  'sign-up': {
    '$url': {
    };
    '$get': SignUpGetHead;
    '$head': SignUpGetHead;
    '$post': SignUpPost;
  };
  'forgot-password': {
    '$url': {
    };
    '$get': ForgotPasswordGetHead;
    '$head': ForgotPasswordGetHead;
    '$post': ForgotPasswordPost;
  };
  'reset-password': {
    ':token': {
      '$url': {
      };
      '$get': ResetpasswordIdGetHead;
      '$head': ResetpasswordIdGetHead;
      '$post': ResetpasswordIdPost;
    };
  };
  ':provider': {
    'redirect': {
      '$url': {
      };
      '$get': IdRedirectGetHead;
      '$head': IdRedirectGetHead;
    };
    'callback': {
      '$url': {
      };
      '$get': IdCallbackGetHead;
      '$head': IdCallbackGetHead;
    };
  };
  'users': {
    '$url': {
    };
    '$get': UsersGetHead;
    '$head': UsersGetHead;
    '$post': UsersPost;
    ':id': {
      '$url': {
      };
      '$put': UsersIdPutPatch;
      '$patch': UsersIdPutPatch;
      '$delete': UsersIdDelete;
    };
    'invite': {
      '$url': {
      };
      '$post': UsersInvitePost;
    };
    'impersonate': {
      ':id': {
        '$url': {
        };
        '$post': UsersImpersonateIdPost;
      };
    };
  };
  'settings': {
    'profile': {
      '$url': {
      };
      '$put': SettingsProfilePut;
      '$get': SettingsProfileGetHead;
      '$head': SettingsProfileGetHead;
    };
    'tokens': {
      '$url': {
      };
      '$get': SettingsTokensGetHead;
      '$head': SettingsTokensGetHead;
      ':id': {
        '$url': {
        };
        '$delete': SettingsTokensIdDelete;
      };
    };
    'password': {
      '$url': {
      };
      '$put': SettingsPasswordPut;
      '$get': SettingsPasswordGetHead;
      '$head': SettingsPasswordGetHead;
    };
  };
  'api': {
    'tokens': {
      '$url': {
      };
      '$post': ApiTokensPost;
    };
  };
  'dashboard': {
    '$url': {
    };
    '$get': DashboardGetHead;
    '$head': DashboardGetHead;
  };
}
const routes = [
  {
    params: ["*"],
    name: 'drive.fs.serve',
    path: '/uploads/*',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'marketing.show',
    path: '/',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'auth.sign_in.show',
    path: '/login',
    method: ["GET","HEAD"],
    types: {} as LoginGetHead,
  },
  {
    params: [],
    name: 'auth.sign_out.show',
    path: '/logout',
    method: ["GET","HEAD"],
    types: {} as LogoutGetHead,
  },
  {
    params: [],
    name: 'auth.sign_up.show',
    path: '/sign-up',
    method: ["GET","HEAD"],
    types: {} as SignUpGetHead,
  },
  {
    params: [],
    name: 'auth.sign_up.handle',
    path: '/sign-up',
    method: ["POST"],
    types: {} as SignUpPost,
  },
  {
    params: [],
    name: 'auth.forgot_password.show',
    path: '/forgot-password',
    method: ["GET","HEAD"],
    types: {} as ForgotPasswordGetHead,
  },
  {
    params: [],
    name: 'auth.forgot_password.handle',
    path: '/forgot-password',
    method: ["POST"],
    types: {} as ForgotPasswordPost,
  },
  {
    params: ["token"],
    name: 'auth.reset_password.show',
    path: '/reset-password/:token',
    method: ["GET","HEAD"],
    types: {} as ResetpasswordIdGetHead,
  },
  {
    params: ["token"],
    name: 'auth.reset_password.handle',
    path: '/reset-password/:token',
    method: ["POST"],
    types: {} as ResetpasswordIdPost,
  },
  {
    params: ["provider"],
    name: 'social.create',
    path: '/:provider/redirect',
    method: ["GET","HEAD"],
    types: {} as IdRedirectGetHead,
  },
  {
    params: [],
    name: 'users.index',
    path: '/users',
    method: ["GET","HEAD"],
    types: {} as UsersGetHead,
  },
  {
    params: [],
    name: 'users.store',
    path: '/users',
    method: ["POST"],
    types: {} as UsersPost,
  },
  {
    params: ["id"],
    name: 'users.update',
    path: '/users/:id',
    method: ["PUT","PATCH"],
    types: {} as UsersIdPutPatch,
  },
  {
    params: ["id"],
    name: 'users.destroy',
    path: '/users/:id',
    method: ["DELETE"],
    types: {} as UsersIdDelete,
  },
  {
    params: [],
    name: 'settings.index',
    path: '/settings',
    method: ["GET","HEAD"],
    types: {} as unknown,
  },
  {
    params: [],
    name: 'profile.show',
    path: '/settings/profile',
    method: ["GET","HEAD"],
    types: {} as SettingsProfileGetHead,
  },
  {
    params: [],
    name: 'tokens.index',
    path: '/settings/tokens',
    method: ["GET","HEAD"],
    types: {} as SettingsTokensGetHead,
  },
  {
    params: ["id"],
    name: 'tokens.destroy',
    path: '/settings/tokens/:id',
    method: ["DELETE"],
    types: {} as SettingsTokensIdDelete,
  },
  {
    params: [],
    name: 'password.show',
    path: '/settings/password',
    method: ["GET","HEAD"],
    types: {} as SettingsPasswordGetHead,
  },
  {
    params: [],
    name: 'dashboard.show',
    path: '/dashboard',
    method: ["GET","HEAD"],
    types: {} as DashboardGetHead,
  },
] as const;
export const api = {
  routes,
  definition: {} as ApiDefinition
}
declare module '@tuyau/inertia/types' {
  type InertiaApi = typeof api
  export interface Api extends InertiaApi {}
}
